# -*- coding: utf-8 -*-
# @Time : 2022/4/8 21:00
# @Author : Tory Deng
# @File : decomposition.py
# @Software: PyCharm
"""
1. PCA
2. GLM-PCA
3. UMAP
"""
import os
from typing import Literal
from sklearn.decomposition import TruncatedSVD
import torch
from torchnmf.nmf import NMF
import anndata as ad
import pandas as pd
import scanpy as sc
import umap


def reduce_dimension(
        adata: ad.AnnData,
        dr_method: Literal['pca', 'umap', 'pca-umap'],
        n_components: int
) -> ad.AnnData:
    cache = load_cache(adata.uns['data_name'], dr_method, n_components)
    if cache is not None:
        cache.uns['dr_method'] = dr_method
        return cache
    else:
        if dr_method == 'pca':
            gene_embedding = sc.tl.pca(adata.X.T, n_comps=n_components)  # compute PCs on normalized data
        elif dr_method == 'svd':
            model = TruncatedSVD(n_components=n_components, random_state=2022)
            cell_embedding = model.fit_transform(adata.X)
            gene_embedding = model.components_.T
        elif dr_method == 'nmf':
            model = NMF(adata.layers['normalized'].shape, rank=n_components).cuda()
            model.fit(torch.from_numpy(adata.layers['normalized']).cuda())
            gene_embedding, cell_embedding = model.W.cpu().detach().numpy(), model.H.cpu().detach().numpy()
        elif dr_method == 'umap':
            gene_embedding = umap.UMAP(n_components=n_components).fit_transform(adata.X.T)
        elif dr_method == 'pca-umap':
            pca_emb = sc.tl.pca(adata.X.T, n_comps=n_components * 2)  # (n_features, n_components)
            gene_embedding = umap.UMAP(n_components=n_components).fit_transform(pca_emb)
        else:
            raise NotImplementedError(f"{dr_method} has not been implemented!")

        adata.varm[dr_method] = pd.DataFrame(gene_embedding, index=adata.var_names)  # shape: (n_genes, n_comps)
        adata.varm[dr_method].columns = adata.varm[dr_method].columns.astype(str)
        if 'cell_embedding' in locals().keys():
            adata.obsm[dr_method] = pd.DataFrame(cell_embedding, index=adata.obs_names)
            adata.obsm[dr_method].columns = adata.obsm[dr_method].columns.astype(str)
        save_cache(adata)
        adata.uns['dr_method'] = dr_method
        return adata


def load_cache(data_name, dr_method, n_components):
    file_path = f"cache/reducedData/{data_name}.h5ad"
    if os.path.exists(file_path):
        print(f"Loading reduced data from {file_path}...")
        cached = sc.read_h5ad(file_path)
        if dr_method in cached.varm and cached.varm[dr_method].shape[1] == n_components:
            print("Use the cache...")
            return cached
    print(f"{n_components} components generated by {dr_method} not found. Use it to compute...")


def save_cache(adata: ad.AnnData):
    file_path = f"cache/reducedData/{adata.uns['data_name']}.h5ad"
    if not os.path.exists('cache/reducedData/'):
        os.makedirs('cache/reducedData/')
    print(f"Saving reduced data to {file_path}...")
    sc.write(file_path, adata)
