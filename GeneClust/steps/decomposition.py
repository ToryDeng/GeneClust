# -*- coding: utf-8 -*-
# @Time : 2022/4/8 21:00
# @Author : Tory Deng
# @File : decomposition.py
# @Software: PyCharm
"""
1. PCA
2. GLM-PCA
3. UMAP
"""
import os

import pandas as pd
import umap
from typing import Literal
import scanpy as sc
import anndata as ad
from glmpca.glmpca import glmpca


def reduce_dimension(
        adata: ad.AnnData,
        dr_method: Literal['pca', 'glm-pca', 'umap'],
        n_componets: int
):
    print(os.getcwd())
    cache = load_cache(adata.uns['data_name'], dr_method, n_componets)
    if cache is not None:
        return cache
    else:
        if dr_method == 'pca':
            embedding = sc.pp.pca(adata.T.X, n_comps=n_componets, copy=True)  # compute PCs on normalized data
        elif dr_method == 'glm-pca':
            embedding = glmpca(adata.raw.X, L=n_componets, ctl={"maxIter": 500, "eps": 1e-3})["factors"]  # use raw counts
        elif dr_method == 'umap':
            embedding = umap.UMAP(n_components=n_componets).fit_transform(adata.T.X)
        else:
            raise NotImplementedError(f"{dr_method} has not been implemented!")

        adata.varm[dr_method] = pd.DataFrame(embedding, index=adata.var_names)  # shape: (n_genes, n_comps)
        adata.varm[dr_method].columns = adata.varm[dr_method].columns.astype(str)
        save_cache(adata)
        return adata


def load_cache(data_name, dr_method, n_componets):
    file_path = f"cache/reducedData/{data_name}.h5ad"
    if os.path.exists(file_path):
        print(f"Loading reduced data from {file_path}...")
        cached = sc.read_h5ad(file_path)
        if dr_method in cached.varm and cached.varm[dr_method].shape[1] == n_componets:
            print("Use the cache...")
            return cached
    print(f"{n_componets} components generated by {dr_method} not found. Use it to compute...")


def save_cache(adata:ad.AnnData):
    file_path = f"cache/reducedData/{adata.uns['data_name']}.h5ad"
    if not os.path.exists('cache/reducedData/'):
        os.makedirs('cache/reducedData/')
    print(f"Saving reduced data to {file_path}...")
    sc.write(file_path, adata)

